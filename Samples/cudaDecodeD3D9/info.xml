<entry>
    <name>CUDA Video Decoder D3D9 API</name>
    <owner>Frank Jargstorff</owner>
    <group>CUDA</group>
    <description><![CDATA[This sample demonstrates how to efficiently use the CUDA Video Decoder API to decode MPEG-2, VC-1, or H.264 sources.  YUV to RGB conversion of video is accomplished with CUDA kernel.  The output result is rendered to a D3D9 surface.  The decoded video is not displayed on the screen, but with -displayvideo at the command line parameter, the video output can be seen.  Requires a Direct3D capable device and Compute Capability 1.1 or higher.]]></description>
    <project_path>3_Imaging\cudaDecodeD3D9</project_path>
    <screenshot_sm>doc\sshot_sm.jpg</screenshot_sm>
    <screenshot_md>doc\sshot_md.jpg</screenshot_md>
    <screenshot_lg>doc\sshot_lg.jpg</screenshot_lg>
    <userguide></userguide>
    <video></video>
    <whitepaper>doc\nvcuvid.pdf</whitepaper>
    <executable>Bin\win32\release\cudaDecodeD3D9.exe</executable>
    <minspec>GeForce 8</minspec>
    <keywords>GPGPU,CUDA,video,d3d</keywords>
    <scope>2:Graphics Interop,2:Image Processing,2:Data Compression,2:Video Codecs,2:Computer Vision</scope>
    <featured_date>050601</featured_date>
    <files>
        <file>data\NV12ToARGB_drvapi_Win32.ptx</file>
        <file>data\NV12ToARGB_drvapi_x64.ptx</file>
        <file>data\plush1_720p_10s.m2v</file>
    </files>

    <!-- *** Additional project definition information *** -->
    <!-- Libraries that the project should be linked against. Document may contain any number of "libraries" elements. -->
    <!-- Attributes "os" and "arch" are optional and may be used in any combination. -->
    <!-- "framework" attribute will be ignored on platforms other then Mac OS X -->
    <library os="windows">d3d9</library>
    <library os="windows">d3dx9</library>
    <library os="windows">nvcuvid</library>
    
    <!-- Either absolute or relative to sample -->
    <library-path os="windows" arch="x86_64">$(DXSDK_DIR)/lib/x86</library-path>
    <library-path os="windows" arch="Win32">.$(DXSDK_DIR)/lib/Win32</library-path>

    <!-- Either absolute or relative to sample -->
    <include-path>./</include-path>
    <include-path>../</include-path>
    <include-path>../../common/inc</include-path>
    
    <!-- Can be either "separate" or "whole", omitting this element means that sample can be compiled either way -->
    <devicecompilation>whole</devicecompilation>

    <!-- These options will be passed to NVCC compiler as is and for all files -->
    <nvcc-compiler file="NV12ToARGB_drvapi.cu"></nvcc-compiler>
    <sm-arch>sm11</sm-arch>
    <sm-arch>sm20</sm-arch>
    <sm-arch>sm30</sm-arch>

    <!-- One of "exe|dll|lib" (exe is default) -->
    <type>exe</type>

    <!-- By default IDE will open file "samplename.(cu|cpp) -->
    <primary-file>videoDecodeD3D9.cpp</primary-file>

    <!-- Collection of [OS][:arch] tokens -->
    <supported-env>windows7</supported-env>
</entry>
